import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getFirestore, collection, addDoc, doc, getDoc, setDoc, deleteDoc, updateDoc, onSnapshot, query } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
const firebaseConfig = { apiKey: "AIzaSyBbxlvJm8gbm7Cv4hdp-UBoKOJfhqYYGW0", authDomain: "trading-journal43.firebaseapp.com", projectId: "trading-journal43", storageBucket: "trading-journal43.appspot.com", messagingSenderId: "920530022010", appId: "1:920530022010:web:28f38a8275c12f6c6795c3", measurementId: "G-8WJHB9L7W6" };
const app = initializeApp(firebaseConfig), db = getFirestore(app), auth = getAuth(app);
document.addEventListener('DOMContentLoaded', () => {
    let trades = [], transactions = [], currentUser = null, tradesUnsubscribe = null, transactionsUnsubscribe = null, settingsUnsubscribe = null, isRegisterMode = false, livePrices = {}, liveDataInterval = null, apiKey = '';
    const liveDataIntervalTime = 5000;
    let currentFilters = { ticker: '', startDate: '', endDate: '', sort: 'date-desc', plStatus: 'all' };
    const $ = id => document.getElementById(id);
    const authOverlay = $('auth-overlay'), appContainer = $('app-container'), authForm = $('auth-form'), emailInput = $('email-input'), passwordInput = $('password-input'), authBtn = $('auth-btn'), authLoader = $('auth-loader'), authError = $('auth-error'), authControls = $('auth-controls'), userGreeting = $('user-greeting'), authTitle = $('auth-title'), authSwitchText = $('auth-switch-text'), forgotPasswordLink = $('forgot-password'), portfolioValueEl = $('portfolio-value'), cashAvailableEl = $('cash-available'), stocksValueEl = $('stocks-value'), monthlyTaxEstimateEl = $('monthly-tax-estimate'), taxInfoBtn = $('tax-info-btn'), depositBtn = $('deposit-btn'), withdrawBtn = $('withdraw-btn'), transactionDateInput = $('transaction-date'), transactionAmountInput = $('transaction-amount'), transactionsHistoryList = $('transactions-history-list'), noTransactionsMessage = $('no-transactions-message'), tradeForm = $('trade-form'), tradesList = $('trades-list'), noTradesMessage = $('no-trades-message'), exportTradesBtn = $('export-trades-btn'), exportTransactionsBtn = $('export-transactions-btn'), messageModal = $('message-modal'), editTradeModal = $('edit-trade-modal'), confirmModal = $('confirm-modal'), resetPasswordModal = $('reset-password-modal'), settingsModal = $('settings-modal'), taxInfoModal = $('tax-info-modal'), filterTradesModal = $('filter-trades-modal'), filterTradesBtn = $('filter-trades-btn'), taxStartMonthSelect = $('tax-start-month-select'), taxEndMonthSelect = $('tax-end-month-select'), generateTaxReportBtn = $('generate-tax-report-btn'), mainMenu = $('main-menu'), closeMenuBtn = $('close-menu-btn'), tradeCalculator = $('trade-calculator'), settingsBtnMenu = $('settings-btn-menu'), tradesListModal = $('trades-list-modal'), summaryModal = $('summary-modal'), openTradesModalBtn = $('open-trades-modal-btn'), openSummaryModalBtn = $('open-summary-modal-btn'), closeTradesModalBtn = $('close-trades-modal-btn'), closeSummaryModalBtn = $('close-summary-modal-btn');
    let doughnutChart, lineChart;
    const getTodaysDate = () => new Date().toISOString().split('T')[0];
    const formatCurrency = (num) => { if (num === null || typeof num === 'undefined' || isNaN(num)) return 'N/A'; const options = { minimumFractionDigits: 2, maximumFractionDigits: 2 }; const formattedNum = Math.abs(num).toLocaleString('en-US', options); return num < 0 ? `\u200e-${formattedNum}$` : `\u200e${formattedNum}$`; };
    const showMessage = (text, duration = 4000) => { messageModal.innerHTML = `<div class="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4 shadow-lg text-center"><p class="text-lg font-semibold mb-4 text-white">${text}</p><button id="close-modal-btn" class="btn-primary px-4 py-2 rounded-lg">סגור</button></div>`; messageModal.classList.remove('hidden'); const closeModal = () => messageModal.classList.add('hidden'); $('close-modal-btn').addEventListener('click', closeModal); if (duration > 0) setTimeout(closeModal, duration); };
    const showConfirmation = (message, onConfirm) => { confirmModal.innerHTML = `<div class="card text-center p-8 w-full max-w-sm"><p class="text-lg font-semibold mb-6 text-white">${message}</p><div class="flex justify-center gap-4"><button id="confirm-cancel-btn" class="btn-secondary px-6 py-2">ביטול</button><button id="confirm-ok-btn" class="btn-primary bg-red-600 hover:bg-red-700 text-white px-6 py-2">אישור</button></div></div>`; confirmModal.classList.remove('hidden'); $('confirm-ok-btn').onclick = () => { onConfirm(); confirmModal.classList.add('hidden'); }; $('confirm-cancel-btn').onclick = () => confirmModal.classList.add('hidden'); };
    const showTradeDetailsModal = (trade) => { const pl = calculateTotalPL(trade); const plDisplay = pl !== null ? formatCurrency(pl) : 'פתוחה'; const plClass = pl !== null ? (pl >= 0 ? 'pl-positive' : 'pl-negative') : 'pl-open'; const tradeType = trade.type || 'long'; const modalContent = `<div class="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4 shadow-lg text-white"><h3 class="text-xl font-bold mb-4 text-center text-orange-400">פרטי עסקה: ${trade.ticker}</h3><div class="space-y-2 text-right"><p><strong>סוג:</strong> <span class="${tradeType === 'long' ? 'text-green-400' : 'text-red-400'}">${tradeType === 'long' ? 'לונג' : 'שורט'}</span></p><p><strong>תאריך:</strong> ${new Date(trade.date).toLocaleDateString('he-IL')}</p><p><strong>כמות:</strong> ${trade.quantity}</p><p><strong>מחיר כניסה:</strong> ${formatCurrency(trade.entry)}</p><p><strong>מחיר יציאה:</strong> ${trade.exit ? formatCurrency(trade.exit) : '—'}</p><p><strong>רווח/הפסד:</strong> <span class="${plClass} font-bold">${plDisplay}</span></p></div><button id="close-modal-btn" class="mt-6 w-full btn-primary px-4 py-2 rounded-lg">סגור</button></div>`; messageModal.innerHTML = modalContent; messageModal.classList.remove('hidden'); $('close-modal-btn').addEventListener('click', () => messageModal.classList.add('hidden')); };
    const calculateTotalPL = (trade) => { if (trade.exit === null || trade.exit === undefined || trade.exit === '') return null; const entry = parseFloat(trade.entry), exit = parseFloat(trade.exit), quantity = parseFloat(trade.quantity); if(isNaN(entry) || isNaN(exit) || isNaN(quantity)) return null; return (trade.type || 'long') === 'long' ? (exit - entry) * quantity : (entry - exit) * quantity; };
    const calculatePortfolioValue = () => { const initialCapital = transactions.reduce((acc, t) => t.type === 'deposit' ? acc + t.amount : acc - t.amount, 0); const realizedPL = trades.filter(t => t.exit).reduce((sum, t) => sum + calculateTotalPL(t), 0); const unrealizedPL = trades.filter(t => !t.exit).reduce((sum, t) => { const tempClosedTrade = { ...t, exit: livePrices[t.ticker] || t.entry }; return sum + calculateTotalPL(tempClosedTrade); }, 0); return initialCapital + realizedPL + unrealizedPL; };
    const calculateCashAvailable = () => { const initialCapital = transactions.reduce((acc, t) => t.type === 'deposit' ? acc + t.amount : acc - t.amount, 0); const realizedPL = trades.filter(t => t.exit).reduce((sum, t) => sum + calculateTotalPL(t), 0); const investedInOpenTrades = trades.filter(t => !t.exit).reduce((sum, t) => sum + (t.entry * t.quantity), 0); return initialCapital + realizedPL - investedInOpenTrades; };
    const calculateStocksValue = () => trades.filter(t => !t.exit).reduce((sum, t) => sum + ((livePrices[t.ticker] || t.entry) * t.quantity), 0);
    const calculateMonthlyTax = (date = new Date()) => { const start = new Date(date.getFullYear(), date.getMonth(), 1), end = new Date(date.getFullYear(), date.getMonth() + 1, 0); end.setHours(23, 59, 59, 999); const totalPLThisMonth = trades.filter(t => t.exit && new Date(t.date) >= start && new Date(t.date) <= end).reduce((sum, t) => sum + calculateTotalPL(t), 0); return totalPLThisMonth > 0 ? totalPLThisMonth * 0.25 : 0; };
    const checkAndCloseStoppedTrades = (ticker, livePrice) => { if (!currentUser) return; trades.filter(t => t.ticker === ticker && !t.exit && t.stopLoss).forEach(trade => { const sl = parseFloat(trade.stopLoss); let triggered = (trade.type || 'long') === 'long' ? livePrice <= sl : livePrice >= sl; if (triggered) { console.log(`Stop loss triggered for ${trade.ticker} at ${sl}`); updateDoc(doc(db, "users", currentUser.uid, "trades", trade.id), { exit: sl, notes: (trade.notes || '') + `\n(נסגרה אוטומטית ע"י סטופ לוס ב-${new Date().toLocaleString('he-IL')})` }).catch(e => console.error("Error closing trade by SL:", e)); } }); };
    const fetchLivePrices = async () => {
        if (!apiKey) return;
        const uniqueTickers = [...new Set(trades.filter(t => !t.exit).map(t => t.ticker))];
        if (uniqueTickers.length === 0) return;
        let pricesUpdated = false;
        for (const ticker of uniqueTickers) {
            try {
                const res = await fetch(`https://finnhub.io/api/v1/quote?symbol=${ticker}&token=${apiKey}`);
                if (!res.ok) { console.warn(`Finnhub API request failed for ${ticker} with status: ${res.status}`); continue; }
                const data = await res.json();
                if (data.c && data.c > 0) { livePrices[ticker] = data.c; pricesUpdated = true; checkAndCloseStoppedTrades(ticker, data.c); } 
                else { console.log(`No valid price data received for ticker: ${ticker}`); }
            } catch (error) { console.error(`Error fetching price for ${ticker}:`, error.message); }
        }
        if (pricesUpdated) { renderPortfolioValue(); renderTrades(); }
    };
    const startLiveData = () => { if (liveDataInterval) clearInterval(liveDataInterval); if (apiKey) { fetchLivePrices(); liveDataInterval = setInterval(fetchLivePrices, liveDataIntervalTime); } };
    const stopLiveData = () => { if (liveDataInterval) { clearInterval(liveDataInterval); liveDataInterval = null; } };
    const getFilteredTrades = () => { 
        let filtered = [...trades]; 
        if (currentFilters.ticker) filtered = filtered.filter(t => t.ticker.toUpperCase().includes(currentFilters.ticker.toUpperCase())); 
        if (currentFilters.startDate) filtered = filtered.filter(t => t.date >= currentFilters.startDate); 
        if (currentFilters.endDate) filtered = filtered.filter(t => t.date <= currentFilters.endDate); 
        if (currentFilters.plStatus === 'profitable') { filtered = filtered.filter(t => calculateTotalPL(t) !== null && calculateTotalPL(t) > 0); } 
        else if (currentFilters.plStatus === 'losing') { filtered = filtered.filter(t => calculateTotalPL(t) !== null && calculateTotalPL(t) < 0); }
        filtered.sort((a, b) => { if ($('show-open-trades-toggle').checked) { const aIsOpen = !a.exit, bIsOpen = !b.exit; if (aIsOpen && !bIsOpen) return -1; if (!aIsOpen && bIsOpen) return 1; } return currentFilters.sort === 'date-asc' ? new Date(a.date) - new Date(b.date) : new Date(b.date) - new Date(a.date); }); 
        return filtered; 
    };
    const renderPortfolioValue = () => { const value = calculatePortfolioValue(); portfolioValueEl.textContent = formatCurrency(value); const portfolioReturnEl = $('portfolio-return'); const totalDeposits = transactions.filter(t => t.type === 'deposit').reduce((sum, t) => sum + t.amount, 0); if (totalDeposits > 0) { const returnPercentage = ((value - totalDeposits) / totalDeposits) * 100; portfolioReturnEl.textContent = `תשואה כוללת: \u200e${returnPercentage.toFixed(2)}%`; portfolioReturnEl.className = `text-lg mt-1 ${returnPercentage >= 0 ? 'pl-positive' : 'pl-negative'}`; } else { portfolioReturnEl.textContent = 'בצע הפקדה כדי לחשב תשואה'; portfolioReturnEl.className = 'text-sm text-gray-400 mt-1'; } cashAvailableEl.textContent = formatCurrency(calculateCashAvailable()); stocksValueEl.textContent = formatCurrency(calculateStocksValue()); monthlyTaxEstimateEl.textContent = formatCurrency(calculateMonthlyTax()); };
    const renderTransactions = () => { const sorted = [...transactions].sort((a, b) => new Date(b.date) - new Date(a.date)); transactionsHistoryList.innerHTML = ''; noTransactionsMessage.classList.toggle('hidden', sorted.length > 0); sorted.forEach(t => { const isDeposit = t.type === 'deposit'; const el = document.createElement('div'); el.className = `flex justify-between items-center p-2 rounded-lg ${isDeposit ? 'bg-green-900/50' : 'bg-red-900/50'}`; el.innerHTML = `<div><p class="font-bold ${isDeposit ? 'text-green-400' : 'text-red-400'}">${isDeposit ? 'הפקדה' : 'משיכה'}: ${formatCurrency(t.amount)}</p><p class="text-xs text-gray-400">${new Date(t.date).toLocaleDateString('he-IL')}</p></div><div class="flex space-x-2"><button data-id="${t.id}" class="delete-transaction-btn btn-icon w-8 h-8"><i class="fas fa-trash-alt btn-delete-icon"></i></button></div>`; transactionsHistoryList.appendChild(el); }); };
    const populateTaxMonthSelectors = () => { const closedTrades = trades.filter(t => t.exit); if (closedTrades.length === 0) { taxStartMonthSelect.innerHTML = '<option value="">אין עסקאות סגורות</option>'; taxEndMonthSelect.innerHTML = '<option value="">אין עסקאות סגורות</option>'; return; } const months = [...new Set(closedTrades.map(t => t.date.substring(0, 7)))].sort().reverse(); taxStartMonthSelect.innerHTML = '<option value="">בחר חודש</option>'; taxEndMonthSelect.innerHTML = '<option value="">בחר חודש</option>'; months.forEach(m => { taxStartMonthSelect.innerHTML += `<option value="${m}">${m}</option>`; taxEndMonthSelect.innerHTML += `<option value="${m}">${m}</option>`; }); };
    const renderTrades = () => { const filtered = getFilteredTrades(); tradesList.innerHTML = ''; noTradesMessage.classList.toggle('hidden', filtered.length > 0); filtered.forEach(t => { const pl = calculateTotalPL(t); let livePLContent = ''; if (pl === null && apiKey && livePrices[t.ticker]) { const livePL = calculateTotalPL({ ...t, exit: livePrices[t.ticker] }); livePLContent = `<div class="col-span-2 grid grid-cols-2"><div><span class="font-semibold">רווח/הפסד נוכחי: </span><span class="${livePL >= 0 ? 'pl-positive' : 'pl-negative'} font-bold">${formatCurrency(livePL)}</span></div><div><span class="font-semibold">מחיר נוכחי: </span><span class="text-gray-300 font-bold">${formatCurrency(livePrices[t.ticker])}</span></div></div>`; } const plDisplay = pl !== null ? formatCurrency(pl) : 'פתוחה'; const plClass = pl !== null ? (pl >= 0 ? 'pl-positive' : 'pl-negative') : 'pl-open'; const type = t.type || 'long', typeClass = type === 'long' ? 'text-green-400' : 'text-red-400', typeIcon = type === 'long' ? 'fa-arrow-trend-up' : 'fa-arrow-trend-down'; const el = document.createElement('div'); el.className = 'card p-4'; el.innerHTML = `<div class="flex justify-between items-start mb-2"><div><span class="text-xl font-bold">${t.ticker}</span><span class="text-sm text-gray-400 block">${new Date(t.date).toLocaleDateString('he-IL')}</span></div><div class="flex items-center space-x-2"><span class="flex items-center gap-2 text-sm font-bold ${typeClass}"><i class="fas ${typeIcon}"></i> ${type === 'long' ? 'לונג' : 'שורט'}</span><button data-id="${t.id}" class="edit-trade-btn btn-icon"><i class="fas fa-edit btn-edit-icon"></i></button><button data-id="${t.id}" class="delete-trade-btn btn-icon"><i class="fas fa-trash-alt btn-delete-icon"></i></button></div></div><div class="grid grid-cols-2 gap-x-4 gap-y-2 text-sm text-gray-300"><div><span class="font-semibold">כניסה:</span> ${formatCurrency(t.entry)}</div><div><span class="font-semibold">יציאה:</span> ${t.exit ? formatCurrency(t.exit) : '—'}</div><div><span class="font-semibold">כמות:</span> ${t.quantity}</div>${t.stopLoss ? `<div><span class="font-semibold">סטופ לוס:</span> ${formatCurrency(t.stopLoss)}</div>` : ''}<div class="col-span-2"><span class="font-semibold">רווח/הפסד סגור: </span><span class="${plClass} font-bold">${plDisplay}</span></div>${livePLContent}${t.reason ? `<div class="col-span-2"><span class="font-semibold">סיבה:</span> ${t.reason}</div>` : ''}${t.notes ? `<div class="col-span-2 whitespace-pre-wrap"><span class="font-semibold">הערות:</span> ${t.notes}</div>` : ''}</div>`; tradesList.appendChild(el); }); };
    const renderSummary = () => { const closed = trades.filter(t => calculateTotalPL(t) !== null); const count = closed.length; if (count === 0) {[$('total-pl'), $('total-trades'), $('win-rate'), $('avg-pl')].forEach(el => el.textContent = 'N/A'); return;} const totalPL = closed.reduce((sum, t) => sum + calculateTotalPL(t), 0); const wins = closed.filter(t => calculateTotalPL(t) > 0).length; $('total-pl').textContent = formatCurrency(totalPL); $('total-pl').className = `font-bold ${totalPL >= 0 ? 'pl-positive' : 'pl-negative'}`; $('total-trades').textContent = count; $('win-rate').textContent = `\u200e${((wins / count) * 100).toFixed(1)}%`; $('avg-pl').textContent = formatCurrency(totalPL / count); $('avg-pl').className = `font-bold ${(totalPL / count) >= 0 ? 'pl-positive' : 'pl-negative'}`; updateDoughnutChart(wins, count - wins); updateLineChart(closed); };
    const updateDoughnutChart = (wins, losses) => { const ctx = $('trades-chart').getContext('2d'); if (doughnutChart) doughnutChart.destroy(); doughnutChart = new Chart(ctx, { type: 'doughnut', data: { labels: ['מנצחות', 'מפסידות'], datasets: [{ data: [wins, losses], backgroundColor: ['#16a34a', '#dc2626'], hoverOffset: 4 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { labels: { color: '#e2e8f0' }}} } }); };
    const updateLineChart = (closedTrades) => { const ctx = $('cumulative-pl-chart').getContext('2d'); const sorted = [...closedTrades].sort((a, b) => new Date(a.date) - new Date(b.date)); let sum = 0; const points = sorted.map(t => sum += calculateTotalPL(t)); if (lineChart) lineChart.destroy(); lineChart = new Chart(ctx, { type: 'line', data: { labels: sorted.map(t => new Date(t.date).toLocaleDateString('he-IL')), datasets: [{ label: 'רווח/הפסד מצטבר', data: points, borderColor: '#fb923c', tension: 0.1 }] }, options: { responsive: true, maintainAspectRatio: false, onClick: (e, els) => { if (els.length > 0) showTradeDetailsModal(sorted[els[0].index]); }, plugins: { legend: { labels: { color: '#e2e8f0' }}, tooltip: { callbacks: { label: (c) => `${c.dataset.label || ''}: ${formatCurrency(c.parsed.y)}` }}}, scales: { y: { ticks: { color: '#e2e8f0' }, grid: { color: 'rgba(255,255,255,0.1)' }}, x: { display: false } } } }); };
    const updateUI = () => { renderPortfolioValue(); renderTransactions(); populateTaxMonthSelectors(); renderTrades(); document.querySelectorAll('.collapsible-content').forEach(el => { if (el.style.maxHeight && el.style.maxHeight !== '0px') { el.style.maxHeight = `${el.scrollHeight}px`; } }); };
    const handleAuthStateChange = (user) => {
        if (user) {
            currentUser = user; authOverlay.classList.add('hidden'); appContainer.classList.remove('blurred'); userGreeting.textContent = `שלום, ${user.email.split('@')[0]}`;
            authControls.innerHTML = `<button id="logout-btn" class="btn-secondary px-4 py-2">התנתק</button><button id="menu-toggle-btn" class="btn-icon text-xl"><i class="fas fa-bars"></i></button>`;
            $('logout-btn').onclick = () => signOut(auth);
            $('menu-toggle-btn').onclick = () => { mainMenu.classList.add('open'); appContainer.classList.add('blurred'); authOverlay.classList.add('blurred'); };
            if (tradesUnsubscribe) tradesUnsubscribe(); if (transactionsUnsubscribe) transactionsUnsubscribe(); if (settingsUnsubscribe) settingsUnsubscribe();
            settingsUnsubscribe = onSnapshot(doc(db, "users", user.uid, "settings", "appSettings"), d => { apiKey = (d.exists() && d.data().key) ? d.data().key : ''; startLiveData(); });
            tradesUnsubscribe = onSnapshot(query(collection(db, "users", user.uid, "trades")), s => { trades = s.docs.map(d => ({ id: d.id, ...d.data() })); updateUI(); startLiveData(); });
            transactionsUnsubscribe = onSnapshot(query(collection(db, "users", user.uid, "transactions")), s => { transactions = s.docs.map(d => ({ id: d.id, ...d.data() })); updateUI(); });
        } else { currentUser = null; trades = []; transactions = []; apiKey = ''; if (tradesUnsubscribe) tradesUnsubscribe(); if (transactionsUnsubscribe) transactionsUnsubscribe(); if (settingsUnsubscribe) settingsUnsubscribe(); stopLiveData(); authOverlay.classList.remove('hidden'); appContainer.classList.add('blurred'); authControls.innerHTML = ''; updateUI(); }
    };
    const toggleAuthMode = () => { isRegisterMode = !isRegisterMode; authError.textContent = ''; authForm.reset(); if (isRegisterMode) { authTitle.textContent = 'הרשמה'; authBtn.textContent = 'הירשם'; authSwitchText.innerHTML = `כבר יש לך חשבון? <span id="switch-to-login" class="auth-link">התחבר כאן</span>`; $('switch-to-login').onclick = toggleAuthMode; } else { authTitle.textContent = 'התחברות'; authBtn.textContent = 'התחבר'; authSwitchText.innerHTML = `אין לך חשבון? <span id="switch-to-register" class="auth-link">הירשם כאן</span>`; $('switch-to-register').onclick = toggleAuthMode; } };
    $('switch-to-register').addEventListener('click', toggleAuthMode);
    authForm.addEventListener('submit', async (e) => { e.preventDefault(); authError.textContent = ''; const email = emailInput.value, password = passwordInput.value; authBtn.classList.add('hidden'); authLoader.classList.remove('hidden'); try { if (isRegisterMode) await createUserWithEmailAndPassword(auth, email, password); else await signInWithEmailAndPassword(auth, email, password); } catch (error) { authError.textContent = { 'auth/email-already-in-use': 'כתובת אימייל זו כבר בשימוש.', 'auth/invalid-email': 'כתובת אימייל לא חוקית.', 'auth/weak-password': 'סיסמה חלשה מדי (נדרשים לפחות 6 תווים).', 'auth/wrong-password': 'אימייל או סיסמה שגויים.', 'auth/user-not-found': 'אימייל או סיסמה שגויים.', 'invalid-credential': 'אימייל או סיסמה שגויים.' }[error.code] || 'אירעה שגיאה. נסה שוב.'; } finally { authBtn.classList.remove('hidden'); authLoader.classList.add('hidden'); } });
    forgotPasswordLink.addEventListener('click', () => { resetPasswordModal.innerHTML = `<div class="card p-8 w-full max-w-sm"><h3 class="text-xl font-semibold mb-6 text-white">איפוס סיסמה</h3><form id="reset-password-form"><p class="text-sm text-gray-400 mb-4">הזן את כתובת המייל שלך ונשלח לך לינק לאיפוס הסיסמה.</p><input type="email" id="reset-email-input" placeholder="כתובת אימייל" class="input-field w-full text-center mb-4" required><div class="flex justify-center gap-4 mt-6"><button type="button" id="cancel-reset" class="btn-secondary px-6 py-2">ביטול</button><button type="submit" class="btn-primary px-6 py-2">שלח</button></div></form></div>`; resetPasswordModal.classList.remove('hidden'); $('cancel-reset').onclick = () => resetPasswordModal.classList.add('hidden'); $('reset-password-form').onsubmit = async (e) => { e.preventDefault(); try { await sendPasswordResetEmail(auth, $('reset-email-input').value); showMessage('נשלח מייל לאיפוס סיסמה. מומלץ לבדוק גם בתיקיית הספאם.'); } catch (error) { showMessage('אירעה שגיאה בשליחת המייל.'); console.error('Password Reset Error:', error); } finally { resetPasswordModal.classList.add('hidden'); } }; });
    const showSettingsModal = () => { const statusHtml = apiKey ? `<div class="flex items-center text-green-400 text-xs mt-2"><i class="fas fa-check-circle ml-2"></i>מפתח API שמור בחשבונך.</div>` : `<div class="flex items-center text-yellow-400 text-xs mt-2"><i class="fas fa-exclamation-triangle ml-2"></i>לא הוגדר מפתח API. נתוני אמת מושבתים.</div>`; settingsModal.innerHTML = `<div class="card p-8 w-full max-w-md"><h3 class="text-xl font-semibold mb-6 text-white">הגדרות</h3><form id="settings-form"><div class="space-y-4"><div><label for="api-key-input" class="block text-sm font-medium">Finnhub API Key</label><input type="text" id="api-key-input" placeholder="הדבק כאן את המפתח שלך" class="input-field w-full" value="${apiKey}"><p class="text-xs text-gray-400 mt-2">הירשם בחינם באתר <a href="https://finnhub.io" target="_blank" class="text-orange-400 underline">Finnhub.io</a> כדי לקבל מפתח API ולהפעיל נתוני אמת.</p>${statusHtml}</div></div><div class="flex justify-end gap-4 mt-6"><button type="button" id="cancel-settings" class="btn-secondary px-6 py-2">ביטול</button><button type="submit" class="btn-primary px-6 py-2">שמור</button></div></form></div>`; settingsModal.classList.remove('hidden'); $('cancel-settings').onclick = () => settingsModal.classList.add('hidden'); $('settings-form').onsubmit = (e) => { e.preventDefault(); performDbAction(async () => { await setDoc(doc(db, "users", currentUser.uid, "settings", "appSettings"), { key: $('api-key-input').value }, { merge: true }); settingsModal.classList.add('hidden'); showMessage('ההגדרות נשמרו.'); }); }; };
    settingsBtnMenu.onclick = showSettingsModal;
    const performDbAction = async (action) => { if (!currentUser) { showMessage("שגיאה: עליך להיות מחובר."); return; } try { await action(); } catch (e) { console.error("Firestore Error:", e); showMessage("אירעה שגיאה בבסיס הנתונים."); } };
    depositBtn.addEventListener('click', () => { const amount = parseFloat(transactionAmountInput.value); if (isNaN(amount) || amount <= 0) { showMessage("אנא הזן סכום חיובי."); return; } performDbAction(async () => { await addDoc(collection(db, "users", currentUser.uid, "transactions"), { type: 'deposit', amount, date: transactionDateInput.value || getTodaysDate() }); transactionAmountInput.value = ''; }); });
    withdrawBtn.addEventListener('click', () => { const amount = parseFloat(transactionAmountInput.value); if (isNaN(amount) || amount <= 0) { showMessage("אנא הזן סכום חיובי."); return; } performDbAction(async () => { await addDoc(collection(db, "users", currentUser.uid, "transactions"), { type: 'withdraw', amount, date: transactionDateInput.value || getTodaysDate() }); transactionAmountInput.value = ''; }); });
    tradeForm.addEventListener('submit', (e) => { e.preventDefault(); const newTrade = { type: document.querySelector('input[name="trade-type"]:checked').value, date: $('trade-date').value, ticker: $('trade-ticker').value.toUpperCase(), quantity: parseFloat($('trade-quantity').value), entry: parseFloat($('trade-entry').value), stopLoss: $('trade-stop-loss').value ? parseFloat($('trade-stop-loss').value) : null, exit: $('trade-exit').value ? parseFloat($('trade-exit').value) : null, reason: $('trade-reason').value, notes: $('trade-notes').value }; if (!newTrade.date || !newTrade.ticker || isNaN(newTrade.quantity) || isNaN(newTrade.entry) || newTrade.quantity <= 0) { showMessage("אנא מלא את כל שדות החובה."); return; } performDbAction(async () => { await addDoc(collection(db, "users", currentUser.uid, "trades"), newTrade); tradeForm.reset(); $('trade-date').value = getTodaysDate(); }); });
    document.body.addEventListener('click', e => { 
        if (e.target.closest('.delete-trade-btn')) { const id = e.target.closest('.delete-trade-btn').dataset.id; showConfirmation('האם למחוק את העסקה?', () => performDbAction(() => deleteDoc(doc(db, "users", currentUser.uid, "trades", id)))); } 
        if (e.target.closest('.delete-transaction-btn')) { const id = e.target.closest('.delete-transaction-btn').dataset.id; showConfirmation('האם למחוק את הפעולה?', () => performDbAction(() => deleteDoc(doc(db, "users", currentUser.uid, "transactions", id)))); } 
        if (e.target.closest('#clear-filters-btn-list')) { clearFilters(); }
        if (e.target.closest('.edit-trade-btn')) { const id = e.target.closest('.edit-trade-btn').dataset.id; const trade = trades.find(t => t.id === id); if (!trade) return; editTradeModal.innerHTML = `<div class="bg-gray-800 rounded-lg p-6 max-w-lg w-full mx-4 shadow-lg text-white"><h3 class="text-xl font-semibold mb-6">ערוך / סגור עסקה: ${trade.ticker}</h3><form id="edit-trade-form" class="space-y-4"><div class="flex justify-center gap-4 mb-4 border-b border-gray-700 pb-4"><input type="radio" id="edit-trade-type-long" name="edit-trade-type" value="long" class="trade-type-input"><label for="edit-trade-type-long" class="trade-type-label flex items-center gap-2"><i class="fas fa-arrow-trend-up text-green-400"></i> לונג</label><input type="radio" id="edit-trade-type-short" name="edit-trade-type" value="short" class="trade-type-input"><label for="edit-trade-type-short" class="trade-type-label flex items-center gap-2"><i class="fas fa-arrow-trend-down text-red-400"></i> שורט</label></div><input type="hidden" id="edit-trade-id" value="${trade.id}"><div class="grid grid-cols-2 gap-4"><div><label>תאריך</label><input type="date" id="edit-trade-date" class="input-field w-full" value="${trade.date}" required></div><div><label>טיקר</label><input type="text" id="edit-trade-ticker" class="input-field w-full" value="${trade.ticker}" required oninput="this.value = this.value.toUpperCase()"></div><div><label>כמות</label><input type="number" step="any" inputmode="decimal" id="edit-trade-quantity" class="input-field w-full" value="${trade.quantity}" required></div><div><label>מחיר כניסה</label><input type="number" inputmode="decimal" step="0.01" id="edit-trade-entry" class="input-field w-full" value="${trade.entry}" required></div><div><label>סטופ לוס</label><input type="number" inputmode="decimal" step="0.01" id="edit-trade-stop-loss" class="input-field w-full" value="${trade.stopLoss || ''}"></div><div><label>מחיר יציאה</label><input type="number" inputmode="decimal" step="0.01" id="edit-trade-exit" class="input-field w-full" placeholder="השאר ריק לעסקה פתוחה" value="${trade.exit || ''}"></div></div><div class="mt-4"><label>הערות</label><textarea id="edit-trade-notes" class="input-field w-full" rows="2">${trade.notes || ''}</textarea></div><div class="flex justify-end space-x-2 mt-6"><button type="button" id="cancel-edit-trade-btn" class="btn-secondary px-4 py-2 rounded-lg">ביטול</button><button type="submit" class="btn-primary px-4 py-2 rounded-lg">שמור שינויים</button></div></form></div>`; editTradeModal.classList.remove('hidden'); const tradeType = trade.type || 'long'; if (tradeType === 'short') { $('edit-trade-type-short').checked = true; } else { $('edit-trade-type-long').checked = true; } $('cancel-edit-trade-btn').onclick = () => editTradeModal.classList.add('hidden'); $('edit-trade-form').onsubmit = (ev) => { ev.preventDefault(); const updated = { type: document.querySelector('input[name="edit-trade-type"]:checked').value, date: $('edit-trade-date').value, ticker: $('edit-trade-ticker').value.toUpperCase(), quantity: parseFloat($('edit-trade-quantity').value), entry: parseFloat($('edit-trade-entry').value), stopLoss: $('edit-trade-stop-loss').value ? parseFloat($('edit-trade-stop-loss').value) : null, exit: $('edit-trade-exit').value ? parseFloat($('edit-trade-exit').value) : null, notes: $('edit-trade-notes').value }; performDbAction(async () => { await updateDoc(doc(db, "users", currentUser.uid, "trades", trade.id), updated); editTradeModal.classList.add('hidden'); showMessage('העסקה עודכנה בהצלחה'); }); }; } 
    });
    const getStampCSS = () => `@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap');.stamp-wrapper{display:flex;align-items:center;justify-content:flex-start;gap:15px;margin-top:2rem;padding-top:1.5rem;border-top:1px solid #4b5563;}.stamp-text{font-size:0.875rem;color:#9ca3af;}.stamp-container{position:relative;width:80px;height:80px;}.stamp-circle{position:relative;width:100%;height:100%;border-radius:50%;border:3px solid #fff;color:#fff;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;padding:5px;box-sizing:border-box;background-color:transparent;filter:blur(.3px) opacity(.85);transform:rotate(-10deg);}.stamp-text-line{font-size:0.8rem;font-weight:700;line-height:1;letter-spacing:1px;font-family:'Playfair Display',serif;}.stamp-number-line{font-size:1.2rem;font-weight:700;line-height:1;margin:2px 0;font-family:'Playfair Display',serif;}.stamp-line{width:60%;height:1px;background-color:#fff;margin:2px 0;}@media print{.stamp-wrapper{border-top-color:#ccc;}.stamp-text{color:#000!important;}.stamp-circle{border-color:#000!important;color:#000!important;filter:none!important;}.stamp-line{background-color:#000!important;}}`;
    const getStampHTML = () => `<div class="stamp-wrapper"><p class="stamp-text">מסמך זה הופק על ידי</p><div class="stamp-container"><div class="stamp-circle"><div class="stamp-text-line">trading</div><div class="stamp-text-line">journal</div><div class="stamp-number-line">44</div><div class="stamp-line"></div></div></div></div>`;
    const openReportWindow = (html) => { const win = window.open("", "ReportWindow"); win.document.open(); win.document.write(html); win.document.close(); };
    generateTaxReportBtn.addEventListener('click', () => { if (!currentUser) { showMessage("יש להתחבר כדי להפיק דוחות."); return; } const start = taxStartMonthSelect.value, end = taxEndMonthSelect.value; if (!start || !end) { showMessage('אנא בחר חודש התחלה וסיום.'); return; } if (start > end) { showMessage('חודש ההתחלה חייב להיות לפני חודש הסיום או זהה לו.'); return; } const startDate = new Date(start + '-01'), [endYear, endMonthNum] = end.split('-'), endDate = new Date(endYear, endMonthNum, 0); endDate.setHours(23, 59, 59, 999); const tradesInPeriod = trades.filter(t => t.exit && new Date(t.date) >= startDate && new Date(t.date) <= endDate); if (tradesInPeriod.length === 0) { showMessage('אין עסקאות סגורות בתקופה שנבחרה.'); return; } const totalPL = tradesInPeriod.reduce((sum, t) => sum + calculateTotalPL(t), 0); const taxAmount = totalPL > 0 ? totalPL * 0.25 : 0; const finalHtml = `<!DOCTYPE html><html lang="he" dir="rtl"><head><title>דוח מס תקופתי</title><style>body{font-family:Rubik,sans-serif;background:#111827;color:#e2e8f0;padding:1.5rem;text-align:center}h1{font-size:1.5rem}.pl-positive{color:#16a34a}.pl-negative{color:#dc2626}.report-container{max-width:600px;margin:1rem auto}.summary-card{background:#1f2937;border-radius:.75rem;padding:1rem;margin-bottom:1rem;border:1px solid #374151}.summary-title{font-size:1rem;color:#9ca3af;margin-bottom:.5rem}.summary-value{font-size:1.75rem;font-weight:700}${getStampCSS()}@media print{button{display:none}body{background:#fff;color:#000}.summary-card{background:#f3f4f6;border-color:#e5e7eb}}</style></head><body><div style="position:fixed;top:1rem;left:1rem;z-index:100"><button onclick="window.print()" style="padding:.5rem 1rem;background:#fb923c;color:#111827;border:none;border-radius:.5rem;cursor:pointer;font-weight:700">הדפס / שמור כ-PDF</button></div><div class="report-container"><h1>דוח מס תקופתי</h1><p>תקופה: ${start===end?start:`${start} עד ${end}`}</p><div class="summary-card"><h2 class="summary-title">סה"כ מאזן עסקאות</h2><p class="summary-value ${totalPL>=0?'pl-positive':'pl-negative'}">${formatCurrency(totalPL)}</p></div><div class="summary-card"><h2 class="summary-title">סה"כ מס משוער לתשלום (25%)</h2><p class="summary-value pl-negative">${formatCurrency(taxAmount)}</p></div>${getStampHTML()}</div></body></html>`; openReportWindow(finalHtml); });
    exportTradesBtn.addEventListener('click', () => {
        const toExport = getFilteredTrades(); if (toExport.length === 0) { showMessage('אין עסקאות לייצא.'); return; }
        const dataStr = JSON.stringify(toExport);
        const script = `<script>
            const allTrades=${dataStr};
            function formatC(n){if(n==null||isNaN(n))return'N/A';const f=Math.abs(n).toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});return n<0?'\\u200e-'+f+'$':'\\u200e'+f+'$'}
            function calcPL(t){if(t.exit===null||t.exit===undefined||t.exit==='')return null;const e=parseFloat(t.entry),x=parseFloat(t.exit),q=parseFloat(t.quantity);return(t.type||'long')==='long'?(x-e)*q:(e-x)*q}
            function renderT(trades){const b=document.getElementById('trades-tbody');b.innerHTML='';trades.forEach(t=>{const p=calcPL(t);const iC=p!==null?(p>=0?'#16a34a':'#dc2626'):'#facc15';const ind='<span style="display:inline-block;width:12px;height:12px;border-radius:50%;background-color:'+iC+';-webkit-print-color-adjust:exact;print-color-adjust:exact"></span>';const inv=parseFloat(t.entry)*parseFloat(t.quantity);const pP=p!==null&&inv>0?((p/inv)*100).toFixed(2)+'%':'N/A';const r=document.createElement('tr');r.innerHTML='<td>'+ind+'</td><td>'+new Date(t.date).toLocaleDateString('he-IL')+'</td><td>'+t.ticker+'</td><td>'+((t.type||'long')==='long'?'לונג':'שורט')+'</td><td>'+t.quantity+'</td><td>'+formatC(t.entry)+'</td><td>'+formatC(inv)+'</td><td>'+(t.exit?formatC(t.exit):'פתוחה')+'</td><td>'+(p!==null?formatC(p):'N/A')+'</td><td>'+pP+'</td>';b.appendChild(r)});const closed=trades.filter(t=>calcPL(t)!==null);const totPL=closed.reduce((s,t)=>s+calcPL(t),0);const tax=totPL>0?totPL*0.25:0;const net=totPL-tax;document.getElementById('summary').innerHTML='<h2 style="font-size:1.5rem;font-weight:700;margin-bottom:1rem">סיכום (לפי סינון)</h2><p><strong>סה"כ רווח/הפסד ברוטו:</strong> <span style="color:'+(totPL>=0?'#16a34a':'#dc2626')+'">'+formatC(totPL)+'</span></p><p><strong>מס לתשלום (25%):</strong> '+formatC(tax)+'</p><p><strong>סה"כ רווח/הפסד נטו:</strong> <span style="color:'+(net>=0?'#16a34a':'#dc2626')+'">'+formatC(net)+'</span></p>'}
            function filter(){const t=document.getElementById('filter-ticker').value.toUpperCase(),s=document.getElementById('start-date').value,e=document.getElementById('end-date').value,sort=document.getElementById('sort-trades').value;let f=[...allTrades];if(t)f=f.filter(tr=>tr.ticker.toUpperCase().includes(t));if(s)f=f.filter(tr=>tr.date>=s);if(e)f=f.filter(tr=>tr.date<=e);f.sort((a,b)=>(sort==='date-asc')?new Date(a.date)-new Date(b.date):new Date(b.date)-new Date(a.date));renderT(f)}
            function clearF(){document.getElementById('filter-ticker').value='';document.getElementById('start-date').value='';document.getElementById('end-date').value='';document.getElementById('sort-trades').selectedIndex=0;filter()}
            document.addEventListener('DOMContentLoaded',()=>{renderT(allTrades);['filter-ticker','start-date','end-date','sort-trades'].forEach(id=>document.getElementById(id).addEventListener('input',filter));document.getElementById('clear-filter-btn').addEventListener('click',clearF)})
        <\/script>`;
        const headers = ['סטטוס', 'תאריך', 'טיקר', 'סוג', 'כמות', 'כניסה', 'השקעה', 'יציאה', 'רווח/הפסד', 'תשואה %']; const controls = `<div id="controls" style="padding:1rem 2rem;background:#1f2937;border-radius:.5rem;margin-bottom:2rem;display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:1.5rem;align-items:end"><div><label style="display:block;font-size:.875rem;margin-bottom:.25rem">טיקר</label><input type="text" id="filter-ticker" placeholder="הכל" style="width:100%;background:#374151;border:1px solid #4b5563;color:#e2e8f0;border-radius:.5rem;padding:.5rem" oninput="this.value=this.value.toUpperCase()"></div><div><label style="display:block;font-size:.875rem;margin-bottom:.25rem">מתאריך</label><input type="date" id="start-date" style="width:100%;background:#374151;border:1px solid #4b5563;color:#e2e8f0;border-radius:.5rem;padding:.5rem"></div><div><label style="display:block;font-size:.875rem;margin-bottom:.25rem">עד תאריך</label><input type="date" id="end-date" style="width:100%;background:#374151;border:1px solid #4b5563;color:#e2e8f0;border-radius:.5rem;padding:.5rem"></div><div><label style="display:block;font-size:.875rem;margin-bottom:.25rem">מיין לפי</label><select id="sort-trades" style="width:100%;background:#374151;border:1px solid #4b5563;color:#e2e8f0;border-radius:.5rem;padding:.5rem"><option value="date-desc">תאריך (חדש לישן)</option><option value="date-asc">תאריך (ישן לחדש)</option></select></div><div><button id="clear-filter-btn" style="width:100%;padding:.5rem;border-radius:.5rem;background-color:#4b5563;color:#e2e8f0;border:1px solid #4b5563;cursor:pointer">נקה פילטר</button></div></div>`; const finalHtml = `<!DOCTYPE html><html lang="he" dir="rtl"><head><title>דוח עסקאות</title><style>body{font-family:Rubik,sans-serif;background:#111827;color:#e2e8f0;padding:2rem}table{width:100%;border-collapse:collapse;margin-bottom:2rem}th,td{text-align:right;padding:8px;border:1px solid #444}th{background:#1f2937}td{padding:12px 8px} ${getStampCSS()} @media print{#controls,button{display:none}body{background:#fff;color:#000}th{background:#f3f4f6!important}td,th{border-color:#ccc}#summary,#controls{background:#f3f4f6;border:1px solid #e5e7eb}}</style></head><body><div style="position:fixed;top:1rem;left:1rem;z-index:100"><button onclick="window.print()" style="padding:.5rem 1rem;background:#fb923c;color:#111827;border:none;border-radius:.5rem;cursor:pointer;font-weight:700">הדפס / שמור כ-PDF</button></div><h1>דוח עסקאות</h1>${controls}<table border="1"><thead><tr>${headers.map(h=>`<th>${h}</th>`).join('')}</tr></thead><tbody id="trades-tbody"></tbody></table><div id="summary" style="margin-top:2rem;padding:1.5rem;background:#1f2937;border-radius:.5rem"></div>${getStampHTML()}${script}</body></html>`; openReportWindow(finalHtml); });
    exportTransactionsBtn.addEventListener('click', () => { if (transactions.length === 0) { showMessage('אין פעולות בחשבון לייצא.'); return; } const rows = [...transactions].sort((a, b) => new Date(b.date) - new Date(a.date)).map(t => [ new Date(t.date).toLocaleDateString('he-IL'), t.type === 'deposit' ? 'הפקדה' : 'משיכה', `$${t.amount.toFixed(2)}` ]); const deposits = transactions.filter(t=>t.type==='deposit').reduce((s,t)=>s+t.amount,0), withdrawals = transactions.filter(t=>t.type==='withdraw').reduce((s,t)=>s+t.amount,0), net = deposits-withdrawals; const summary = `<div style="margin-top:2rem;padding:1.5rem;background:#1f2937;border-radius:.5rem"><h2 style="font-size:1.5rem;font-weight:700;margin-bottom:1rem">סיכום מאזן</h2><p><strong>סה"כ הפקדות:</strong> <span style="color:#16a34a">$${deposits.toFixed(2)}</span></p><p><strong>סה"כ משיכות:</strong> <span style="color:#dc2626">$${withdrawals.toFixed(2)}</span></p><p><strong>מאזן נטו:</strong> <span style="color:${net>=0?'#16a34a':'#dc2626'}">$${net.toFixed(2)}</span></p></div>`; const finalHtml = `<!DOCTYPE html><html lang="he" dir="rtl"><head><title>דוח פעולות בחשבון</title><style>body{font-family:Rubik,sans-serif;background:#111827;color:#e2e8f0;padding:2rem}table{width:100%;border-collapse:collapse;margin-bottom:2rem}th,td{text-align:right;padding:8px;border:1px solid #444}th{background:#1f2937} ${getStampCSS()} @media print{button{display:none}body{background:#fff;color:#000}th{background:#f3f4f6!important}td,th{border-color:#ccc}div[style*="background:#1f2937"]{background:#f3f4f6!important;border:1px solid #e5e7eb}}</style></head><body><div style="position:fixed;top:1rem;left:1rem;z-index:100"><button onclick="window.print()" style="padding:.5rem 1rem;background:#fb923c;color:#111827;border:none;border-radius:.5rem;cursor:pointer;font-weight:700">הדפס / שמור כ-PDF</button></div><h1>דוח פעולות בחשבון</h1><table><thead><tr><th>תאריך</th><th>סוג פעולה</th><th>סכום ($)</th></tr></thead><tbody>${rows.map(r=>`<tr>${r.map(c=>`<td>${c}</td>`).join('')}</tr>`).join('')}</tbody></table>${summary}${getStampHTML()}</body></html>`; openReportWindow(finalHtml); });
    const setupCollapsible = (btnId, contentId, arrowId) => { const btn = $(btnId), content = $(contentId), arrow = $(arrowId); btn.addEventListener('click', () => { const isCollapsed = !content.style.maxHeight || content.style.maxHeight === '0px'; if(isCollapsed){ content.style.maxHeight = `${content.scrollHeight}px`; setTimeout(() => btn.scrollIntoView({ behavior: 'smooth', block: 'center' }), 300); } else { content.style.maxHeight = '0px'; } if (arrow) arrow.classList.toggle('rotate-180', isCollapsed); }); };
    
    const closeFullscreenModal = (modal) => { modal.classList.remove('open'); appContainer.classList.remove('blurred'); authOverlay.classList.remove('blurred'); };
    closeMenuBtn.onclick = () => closeFullscreenModal(mainMenu);
    openTradesModalBtn.onclick = () => { tradesListModal.classList.add('open'); };
    openSummaryModalBtn.onclick = () => { renderSummary(); summaryModal.classList.add('open'); };
    closeTradesModalBtn.onclick = () => { tradesListModal.classList.remove('open'); };
    closeSummaryModalBtn.onclick = () => { summaryModal.classList.remove('open'); };

    taxInfoBtn.addEventListener('click', () => { taxInfoModal.innerHTML = `<div class="card p-8 w-full max-w-md"><h3 class="text-xl font-semibold mb-4 text-white">חישוב מס משוערך</h3><p class="text-gray-300">הסכום המוצג הוא הערכה בלבד של חבות המס על רווחי הון שמומשו במהלך החודש הקלנדרי הנוכחי.</p><ul class="list-disc list-inside text-gray-400 my-4 space-y-2"><li>החישוב מתבסס על שיעור מס של 25%.</li><li>אינו לוקח בחשבון קיזוז הפסדים, פטורים, או שינויים בחקיקת המס.</li><li>מומלץ להתייעץ עם רואה חשבון או יועץ מס לקבלת חישוב מדויק.</li></ul><div class="flex justify-center mt-6"><button id="close-tax-info-btn" class="btn-primary px-6 py-2">הבנתי</button></div></div>`; taxInfoModal.classList.remove('hidden'); $('close-tax-info-btn').onclick = () => taxInfoModal.classList.add('hidden'); });
    
    const updateClearFilterButtonVisibility = () => { const isFiltered = currentFilters.ticker !== '' || currentFilters.startDate !== '' || currentFilters.endDate !== '' || currentFilters.plStatus !== 'all'; $('clear-filters-btn-list').classList.toggle('hidden', !isFiltered); };
    const clearFilters = () => { currentFilters = { ticker: '', startDate: '', endDate: '', sort: 'date-desc', plStatus: 'all' }; renderTrades(); updateClearFilterButtonVisibility(); filterTradesModal.classList.add('hidden'); };

    $('show-open-trades-toggle').addEventListener('change', renderTrades);
    filterTradesBtn.addEventListener('click', () => { 
        filterTradesModal.innerHTML = `<div class="card p-8 w-full max-w-lg"><h3 class="text-xl font-semibold mb-6 text-white">סינון ומיון עסקאות</h3><form id="filter-trades-form" class="space-y-4"><div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div><label class="block text-sm font-medium mb-1">טיקר</label><input type="text" id="filter-ticker-input" placeholder="הכל" class="input-field w-full" value="${currentFilters.ticker}" oninput="this.value = this.value.toUpperCase()"></div><div><label class="block text-sm font-medium mb-1">מיין לפי</label><select id="filter-sort-select" class="input-field w-full"><option value="date-desc">תאריך (חדש לישן)</option><option value="date-asc">תאריך (ישן לחדש)</option></select></div><div><label class="block text-sm font-medium mb-1">מתאריך</label><input type="date" id="filter-start-date" class="input-field w-full" value="${currentFilters.startDate}"></div><div><label class="block text-sm font-medium mb-1">עד תאריך</label><input type="date" id="filter-end-date" class="input-field w-full" value="${currentFilters.endDate}"></div><div class="md:col-span-2"><label class="block text-sm font-medium mb-1">סטטוס עסקה</label><div class="grid grid-cols-2 gap-2"><button type="button" id="filter-profitable-btn" class="btn-secondary p-2 rounded-lg transition-all duration-200">מרוויחות</button><button type="button" id="filter-losing-btn" class="btn-secondary p-2 rounded-lg transition-all duration-200">מפסידות</button></div></div></div><div class="flex justify-end items-center gap-4 mt-6"><div class="flex gap-4"><button type="button" id="cancel-filter-btn" class="btn-secondary px-6 py-2">ביטול</button><button type="submit" class="btn-primary px-6 py-2">החל</button></div></div></form></div>`; 
        filterTradesModal.classList.remove('hidden'); 
        
        let selectedPlStatus = currentFilters.plStatus;
        const profitableBtn = $('filter-profitable-btn');
        const losingBtn = $('filter-losing-btn');

        const updatePlButtons = () => {
            profitableBtn.classList.toggle('pl-filter-btn-active', selectedPlStatus === 'profitable');
            losingBtn.classList.toggle('pl-filter-btn-active', selectedPlStatus === 'losing');
        };
        
        profitableBtn.onclick = () => {
            selectedPlStatus = selectedPlStatus === 'profitable' ? 'all' : 'profitable';
            updatePlButtons();
        };

        losingBtn.onclick = () => {
            selectedPlStatus = selectedPlStatus === 'losing' ? 'all' : 'losing';
            updatePlButtons();
        };
        
        updatePlButtons();
        
        $('filter-sort-select').value = currentFilters.sort; 
        $('cancel-filter-btn').onclick = () => filterTradesModal.classList.add('hidden'); 
        
        $('filter-trades-form').onsubmit = (e) => { 
            e.preventDefault(); 
            currentFilters = { 
                ticker: $('filter-ticker-input').value, 
                startDate: $('filter-start-date').value, 
                endDate: $('filter-end-date').value, 
                sort: $('filter-sort-select').value, 
                plStatus: selectedPlStatus 
            }; 
            renderTrades(); 
            updateClearFilterButtonVisibility(); 
            filterTradesModal.classList.add('hidden'); 
        }; 
    });
    tradeCalculator.addEventListener('input', () => { const entry = parseFloat($('calc-entry').value), sl = parseFloat($('calc-sl').value), portfolio = parseFloat($('calc-portfolio').value), riskPercent = parseFloat($('calc-risk-percent').value); const riskAmountEl = $('calc-risk-amount'), positionSizeEl = $('calc-position-size'); if ([entry, sl, portfolio, riskPercent].some(isNaN) || riskPercent <= 0 || portfolio <= 0 || entry === sl) { riskAmountEl.textContent = formatCurrency(0); positionSizeEl.textContent = '0'; return; } const riskAmount = portfolio * (riskPercent / 100); const riskPerShare = Math.abs(entry - sl); const positionSize = riskAmount / riskPerShare; riskAmountEl.textContent = formatCurrency(riskAmount); positionSizeEl.textContent = positionSize.toFixed(3); });
    $('autofill-portfolio-btn').addEventListener('click', () => { const portfolioValue = calculatePortfolioValue(); $('calc-portfolio').value = portfolioValue.toFixed(2); tradeCalculator.dispatchEvent(new Event('input')); });
    setupCollapsible('toggle-account-btn', 'account-content', 'account-arrow'); setupCollapsible('toggle-advanced-data-btn', 'advanced-data-content', 'advanced-data-arrow'); setupCollapsible('toggle-tax-history-btn', 'tax-history-content', 'tax-history-arrow'); setupCollapsible('toggle-trade-details-btn', 'trade-details-content', 'trade-details-arrow'); setupCollapsible('toggle-calculator-btn', 'trade-calculator-content', 'calculator-arrow');
    transactionDateInput.value = getTodaysDate(); $('trade-date').value = getTodaysDate(); onAuthStateChanged(auth, handleAuthStateChange);
});